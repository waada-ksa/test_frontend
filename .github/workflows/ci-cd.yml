name: Build Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Build and Test
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present || echo "Linting not configured"
      
    - name: Run tests
      run: npm test --if-present || echo "Tests not configured"
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/
        retention-days: 7

  # Trigger Notify Team workflow
  trigger-notify:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Trigger Notify Team workflow
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'test-build.yml',
            ref: context.ref,
            inputs: {
              build_status: 'success',
              commit_sha: context.sha,
              branch: context.ref.replace('refs/heads/', '')
            }
          })

  # Trigger Docker Build workflow
  trigger-docker:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Trigger Docker Build workflow
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'docker-build.yml',
            ref: context.ref,
            inputs: {
              build_status: 'success',
              commit_sha: context.sha,
              branch: context.ref.replace('refs/heads/', '')
            }
          })

  # Deploy to Development (on develop branch)
  deploy-dev:
    needs: [build, trigger-notify, trigger-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment..."
        # Add your deployment commands here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: Notify Slack - Development Deploy
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'üöÄ Development deployment successful!'
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # Deploy to Production (on main branch)
  deploy-prod:
    needs: [build, trigger-notify, trigger-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: Notify Slack - Production Deploy
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'üöÄ Production deployment successful!'
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # Notify on Failure
  notify-failure:
    needs: build
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Notify Slack - Build Failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: '‚ùå Build failed!'
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
